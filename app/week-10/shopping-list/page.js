"use client";

import { useState, useEffect } from "react";
import { useUserAuth } from "../_utils/auth-context";
import { useRouter } from "next/navigation";
import ItemList from "./item-list";
import NewItem from "./new-item";
import MealIdeas from "./meal-ideas";
import { getItems, addItem, deleteItem } from "../_services/shopping-list-service";

export default function Page() {
  const { user } = useUserAuth();
  const router = useRouter();
  const [items, setItems] = useState([]);
  const [selectedItemName, setSelectedItemName] = useState("");
  const [isLoading, setIsLoading] = useState(true);

  // Load user's items from Firestore
  const loadItems = async () => {
    if (user) {
      try {
        setIsLoading(true);
        const firebaseItems = await getItems(user.uid);
        setItems(firebaseItems);
      } catch (error) {
        console.error("Error loading items:", error);
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Effect to load items when component mounts or user changes
  useEffect(() => {
    if (!user) {
      router.push("/week-10");
      return;
    }
    
    loadItems();
  }, [user, router]);

  // Function to add a new item
  const handleAddItem = async (newItem) => {
    if (user) {
      try {
        // Remove the id generated by the client, as Firebase will generate a new one
        const { id, ...itemData } = newItem;
        
        // Add the item to Firestore
        const newItemId = await addItem(user.uid, itemData);
        
        // Update local state with the new item and the Firebase-generated id
        setItems(prevItems => [...prevItems, { ...newItem, id: newItemId }]);
      } catch (error) {
        console.error("Error adding item:", error);
      }
    }
  };

  // Function to delete an item
  const handleDeleteItem = async (itemId) => {
    if (user) {
      try {
        // Delete the item from Firestore
        await deleteItem(user.uid, itemId);
        
        // Update local state by removing the item
        setItems(prevItems => prevItems.filter(item => item.id !== itemId));
      } catch (error) {
        console.error("Error deleting item:", error);
      }
    }
  };

  // Function to handle item selection
  const handleItemSelect = (itemName) => {
    // Remove any information after the first parenthesis or comma
    const cleanName = itemName.split(/[,(]/)[0].trim();
    // Remove emojis, units, etc.
    const ingredientName = cleanName.replace(/🥛|🍞|🥚|🍌|🥦|🍗|🍖|🧀|🍎|🥔|[\d+]/g, "").trim();
    setSelectedItemName(ingredientName);
  };

  // If user is not authenticated, don't render content
  if (!user) {
    return (
      <div className="flex justify-center items-center h-screen bg-gray-900 text-white">
        <p>Redirecting to login page...</p>
      </div>
    );
  }

  return (
    <main className="min-h-screen bg-gray-900 text-white p-4">
      <h1 className="text-2xl font-bold mb-8">Shopping List</h1>
      
      {isLoading ? (
        <div className="text-center py-4">
          <p>Loading items...</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <NewItem onAddItem={handleAddItem} />
            <ItemList 
              items={items} 
              onItemSelect={handleItemSelect} 
              onItemDelete={handleDeleteItem}
            />
          </div>
          <div>
            <MealIdeas ingredient={selectedItemName} />
          </div>
        </div>
      )}
    </main>
  );
}